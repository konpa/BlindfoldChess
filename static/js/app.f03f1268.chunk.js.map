{"version":3,"sources":["src/context/AuthProvider.tsx","src/screens/LoginScreen.tsx","src/screens/HomeScreen.tsx","src/screens/Game/CreateGameScreen.tsx","src/routes/Router.tsx","App.tsx"],"names":["useProxy","Platform","select","web","default","redirectUri","makeRedirectUri","WebBrowser","host","discovery","authorizationEndpoint","tokenEndpoint","AuthContext","createContext","AuthProvider","children","useState","user","setUser","isLoading","setIsLoading","error","setError","useAuthRequest","clientId","scopes","request","response","promptAsync","useEffect","readResponse","code","type","params","exchangeCodeAsync","extraParams","code_verifier","codeVerifier","then","token","authUser","AsyncStorage","setItem","JSON","stringify","catch","exchangeError","getItem","authData","parse","AuthContextValue","useMemo","login","logout","a","async","axios","method","url","headers","Authorization","accessToken","removeItem","err","Provider","value","propTypes","PropTypes","element","isRequired","LoginScreen","useContext","Box","alignItems","justifyContent","flex","p","_dark","bg","Heading","size","style","textTransform","color","Text","mb","Link","href","ml","Button","onPress","mt","w","maxW","colorScheme","fontSize","HomeScreen","navigation","position","bottom","left","right","py","Center","Stack","space","navigate","CreateGameScreen","View","RootStack","createNativeStackNavigator","LogoutButton","IconButton","icon","Icon","as","MaterialIcons","name","Router","scheme","useColorMode","colorMode","NavigatorDarkTheme","DarkTheme","colors","background","card","HStack","Spinner","accessibilityLabel","NavigationContainer","theme","DefaultTheme","Navigator","initialRouteName","Screen","component","options","title","headerShown","screenOptions","headerTitleStyle","fontWeight","headerTitleAlign","headerRight","Alert","status","variant","VStack","flexShrink","toString","Close","customTheme","extendTheme","config","useSystemColorMode","initialColorMode","App","NativeBaseProvider"],"mappings":"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","file":"static/js/app.f03f1268.chunk.js","sourcesContent":["import React, {\n  createContext, useState, useMemo, useEffect,\n} from 'react';\nimport { Platform } from 'react-native';\nimport * as WebBrowser from 'expo-web-browser';\nimport {\n  makeRedirectUri, useAuthRequest, exchangeCodeAsync, TokenResponse, AuthError,\n} from 'expo-auth-session';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\n\ntype AuthContextData = {\n  user: any,\n  setUser: any,\n  isLoading: boolean,\n  error: any,\n  setError: any,\n  login(): void,\n  logout(): void,\n};\n\ntype UserData = {\n  token: TokenResponse,\n};\n\nconst useProxy = Platform.select({ web: false, default: true });\n\nconst redirectUri = Platform.select({\n  web: __DEV__ ? 'http://localhost:19006/expo-auth-session' : makeRedirectUri({ useProxy }),\n  default: makeRedirectUri({ useProxy }),\n});\n\nWebBrowser.maybeCompleteAuthSession();\n\nconst host = 'https://lichess.org';\nconst clientId = 'io.blindfoldchess';\n\nconst discovery = {\n  authorizationEndpoint: `${host}/oauth`,\n  tokenEndpoint: `${host}/api/token`,\n};\n\nexport const AuthContext = createContext<AuthContextData>({} as AuthContextData);\n\nexport function AuthProvider({ children }:{ children:any }) {\n  const [user, setUser] = useState<UserData | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<AuthError | null>(null);\n\n  const [request, response, promptAsync] = useAuthRequest(\n    {\n      clientId,\n      redirectUri,\n      scopes: ['challenge:write', 'bot:play', 'board:play'],\n    },\n    discovery,\n  );\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    function UseAutoExchange(code: string) {\n      exchangeCodeAsync(\n        {\n          clientId,\n          code,\n          redirectUri,\n          extraParams: {\n            code_verifier: request?.codeVerifier ? request.codeVerifier : '',\n          },\n        },\n        discovery,\n      )\n        .then((token) => {\n          const authUser = { token };\n          AsyncStorage.setItem('@AuthData', JSON.stringify(authUser));\n          setUser(authUser);\n        })\n        .catch((exchangeError) => {\n          setError(exchangeError);\n        });\n    }\n\n    function readResponse() {\n      if (response?.type === 'success') {\n        UseAutoExchange(response.params.code);\n      }\n\n      if (response?.type === 'error') {\n        setError(response?.error ? response.error : null);\n      }\n    }\n\n    AsyncStorage.getItem('@AuthData')\n      .then((authData) => {\n        if (authData) {\n          setUser(JSON.parse(authData));\n        } else {\n          readResponse();\n        }\n      });\n\n    setIsLoading(false);\n  }, [response, request]);\n\n  const AuthContextValue = useMemo(() => ({\n    user,\n    setUser,\n    error,\n    setError,\n    isLoading,\n    login: () => {\n      setIsLoading(true);\n      promptAsync({ useProxy });\n      setIsLoading(false);\n    },\n    logout: async () => {\n      setIsLoading(true);\n      axios({\n        method: 'delete',\n        url: `${host}/api/token`,\n        headers: {\n          Authorization: `Bearer ${user?.token.accessToken}`,\n        },\n      })\n        .then(async () => {\n          await AsyncStorage.removeItem('@AuthData');\n          setUser(null);\n          setIsLoading(false);\n        })\n        .catch((err) => {\n          setError(err);\n          setIsLoading(false);\n        });\n    },\n  }), [user, error, isLoading, promptAsync]);\n\n  return (\n    <AuthContext.Provider\n      value={AuthContextValue}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nAuthProvider.propTypes = {\n  children: PropTypes.element.isRequired,\n};\n","import React, { useContext } from 'react';\nimport {\n  Box, Button, Text, Heading, Link,\n} from 'native-base';\n\nimport { AuthContext } from '../context/AuthProvider';\n\nexport default function LoginScreen() {\n  const { login, isLoading } = useContext(AuthContext);\n\n  return (\n    <Box\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      flex={1}\n      p=\"5\"\n      _dark={{ bg: 'light.800' }}\n    >\n      <Heading size=\"lg\" style={{ textTransform: 'uppercase' }} _dark={{ color: 'light.300' }}>Blindfold Chess</Heading>\n      <Text mb=\"16\" _dark={{ color: 'light.300' }}>\n        Powered by\n        <Link href=\"lichess.org\" ml=\"1\">lichess.org</Link>\n      </Text>\n      <Button\n        onPress={() => login()}\n        mt=\"2\"\n        w=\"100%\"\n        maxW=\"300\"\n        isLoading={isLoading}\n        colorScheme=\"amber\"\n      >\n        SIGN IN\n      </Button>\n      <Text mt=\"2\" fontSize=\"xs\" _dark={{ color: 'light.300' }}>\n        Sign in with your lichess account\n      </Text>\n    </Box>\n  );\n}\n","import React from 'react';\nimport type { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport {\n  Box, Center, Stack, Button,\n} from 'native-base';\n\ntype RootStackParamList = {\n  CreateGame: undefined;\n};\n\ntype Props = NativeStackScreenProps<RootStackParamList, 'CreateGame'>;\n\nexport default function HomeScreen({ navigation }: Props) {\n  return (\n    <Box\n      position=\"absolute\"\n      bottom=\"0\"\n      left=\"0\"\n      right=\"0\"\n      py=\"3\"\n    >\n      <Center>\n        <Stack space={3} w=\"90%\" maxW=\"400\">\n          <Button\n            onPress={() => navigation.navigate('CreateGame')}\n            colorScheme=\"amber\"\n          >\n            NEW GAME\n          </Button>\n        </Stack>\n      </Center>\n    </Box>\n  );\n}\n","import React from 'react';\r\nimport { View, Button, Text } from 'native-base';\r\n\r\nexport default function CreateGameScreen() {\r\n  return (\r\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\r\n      <Text>Create New Game</Text>\r\n      <Button\r\n        mt=\"2\"\r\n        w=\"100%\"\r\n        maxW=\"300\"\r\n        colorScheme=\"amber\"\r\n      >\r\n        PLAY\r\n      </Button>\r\n    </View>\r\n  );\r\n}\r\n","import React, { useContext } from 'react';\nimport { NavigationContainer, DarkTheme, DefaultTheme } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport {\n  useColorMode, Box, HStack, Spinner, Heading, Text, CloseIcon,\n  IconButton, Icon, Center, Stack, Alert, VStack,\n} from 'native-base';\nimport { MaterialIcons } from '@expo/vector-icons';\n\nimport { AuthContext } from '../context/AuthProvider';\nimport LoginScreen from '../screens/LoginScreen';\nimport HomeScreen from '../screens/HomeScreen';\nimport CreateGameScreen from '../screens/Game/CreateGameScreen';\n\ntype RootStackParamList = {\n  SignIn: undefined;\n  Home: undefined;\n  CreateGame: undefined;\n};\n\nconst RootStack = createNativeStackNavigator<RootStackParamList>();\n\nfunction LogoutButton() {\n  const { logout } = useContext(AuthContext);\n\n  return (\n    <IconButton\n      onPress={() => logout()}\n      icon={<Icon as={MaterialIcons} name=\"logout\" size=\"sm\" _dark={{ color: 'light.300' }} />}\n      colorScheme=\"amber\"\n    />\n  );\n}\n\nexport default function Router() {\n  const { user, isLoading, error } = useContext(AuthContext);\n\n  const scheme = useColorMode().colorMode;\n  const NavigatorDarkTheme = {\n    ...DarkTheme,\n    colors: {\n      ...DarkTheme.colors,\n      background: 'rgb(41, 37, 36)', // light.800\n      card: 'rgb(28, 25, 23)', // light.800\n    },\n  };\n\n  if (isLoading) {\n    return (\n      <Box\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        flex={1}\n        _dark={{ bg: 'light.800' }}\n      >\n        <HStack space={2} justifyContent=\"center\">\n          <Spinner accessibilityLabel=\"Loading\" color=\"amber.500\" />\n          <Heading color=\"amber.500\" fontSize=\"md\">\n            Loading\n          </Heading>\n        </HStack>\n      </Box>\n    );\n  }\n\n  return (\n    <NavigationContainer theme={scheme === 'dark' ? NavigatorDarkTheme : DefaultTheme}>\n      {user == null ? (\n        <RootStack.Navigator initialRouteName=\"SignIn\">\n          <RootStack.Screen\n            name=\"SignIn\"\n            component={LoginScreen}\n            options={{\n              title: 'Log In - Blindfold Chess',\n              headerShown: false,\n            }}\n          />\n        </RootStack.Navigator>\n      ) : (\n        <RootStack.Navigator\n          initialRouteName=\"Home\"\n          screenOptions={{\n            headerTitleStyle: {\n              fontWeight: 'bold',\n            },\n            headerTitleAlign: 'center',\n            headerRight: LogoutButton,\n          }}\n        >\n          <RootStack.Screen\n            name=\"Home\"\n            component={HomeScreen}\n            options={{\n              title: 'Blindfold Chess',\n            }}\n          />\n          <RootStack.Screen\n            name=\"CreateGame\"\n            component={CreateGameScreen}\n            options={{\n              title: 'New Game',\n            }}\n          />\n        </RootStack.Navigator>\n      )}\n      {error && (\n        <Box\n          position=\"absolute\"\n          bottom=\"0\"\n          left=\"0\"\n          right=\"0\"\n          py=\"3\"\n        >\n          <Center>\n            <Stack space={3} w=\"90%\" maxW=\"400\">\n              <Alert w=\"100%\" status=\"error\" variant=\"left-accent\">\n                <VStack space={2} flexShrink={1} w=\"100%\">\n                  <HStack flexShrink={1} space={2} justifyContent=\"space-between\">\n                    <HStack space={2} flexShrink={1}>\n                      <Alert.Icon mt=\"1\" />\n                      <Text fontSize=\"md\" color=\"coolGray.800\">\n                        {error.toString()}\n                      </Text>\n                    </HStack>\n                    <IconButton variant=\"unstyled\" icon={<CloseIcon size=\"3\" color=\"coolGray.600\" />} />\n                  </HStack>\n                </VStack>\n              </Alert>\n            </Stack>\n          </Center>\n        </Box>\n      )}\n    </NavigationContainer>\n  );\n}\n","import React from 'react';\nimport { NativeBaseProvider, extendTheme } from 'native-base';\n\nimport Router from './src/routes/Router';\nimport { AuthProvider } from './src/context/AuthProvider';\n\nconst config = {\n  useSystemColorMode: true,\n  initialColorMode: 'light',\n};\n\nconst customTheme = extendTheme({ config });\n\nexport default function App() {\n  return (\n    <NativeBaseProvider theme={customTheme}>\n      <AuthProvider>\n        <Router />\n      </AuthProvider>\n    </NativeBaseProvider>\n  );\n}\n"],"sourceRoot":""}