{"version":3,"sources":["src/services/LichessCtrl.ts","src/context/AuthProvider.tsx","src/screens/LoginScreen.tsx","src/screens/HomeScreen.tsx","src/routes/Router.tsx","App.tsx"],"names":["lichessHost","clientUrl","url","URL","document","location","href","search","LichessCtrl","oauth","OAuth2AuthCodePKCE","authorizationUrl","tokenUrl","clientId","scopes","redirectUrl","onAccessTokenExpiry","refreshAccessToken","onInvalidGrant","a","async","this","fetchAuthorizationCode","AsyncStorage","getItem","authDataSerialized","JSON","parse","isReturningFromAuthServer","getAccessToken","accessContext","token","value","fetch","decorateFetchHTTPClient","window","getUsername","user","name","setItem","stringify","res","json","username","method","headers","Authorization","undefined","error","removeItem","AuthContext","createContext","AuthProvider","children","useState","setUser","isLoading","setIsLoading","setError","AuthContextValue","useMemo","login","logout","then","finally","Provider","propTypes","PropTypes","element","isRequired","LoginScreen","useContext","Box","alignItems","justifyContent","flex","_dark","bg","Button","onPress","mt","colorScheme","position","bottom","left","right","py","Center","Stack","space","w","maxW","Alert","status","variant","VStack","flexShrink","HStack","Icon","Text","fontSize","color","toString","IconButton","icon","Close","size","HomeScreen","StatusBar","safeAreaTop","px","as","MaterialIcons","fontWeight","createNativeStackNavigator","Router","useEffect","init","response","catch","Spinner","accessibilityLabel","Heading","NavigationContainer","Navigator","Screen","component","options","headerShown","customTheme","extendTheme","config","useSystemColorMode","initialColorMode","App","NativeBaseProvider","theme"],"mappings":"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","file":"static/js/app.04795b1f.chunk.js","sourcesContent":["import { AccessContext, HttpClient, OAuth2AuthCodePKCE } from '@bity/oauth2-auth-code-pkce';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nexport const lichessHost = 'https://lichess.org';\nexport const clientId = 'blindfoldchess.dev';\nexport const clientUrl = (() => {\n  const url = new URL(document.location.href);\n  url.search = '';\n  return url.href;\n})();\n\nexport class LichessCtrl {\n  oauth = new OAuth2AuthCodePKCE({\n    authorizationUrl: `${lichessHost}/oauth`,\n    tokenUrl: `${lichessHost}/api/token`,\n    clientId,\n    scopes: ['challenge:write', 'bot:play', 'board:play'],\n    redirectUrl: clientUrl,\n    onAccessTokenExpiry: (refreshAccessToken) => refreshAccessToken(),\n    onInvalidGrant: () => {},\n  });\n\n  error?: any;\n\n  accessContext?: AccessContext;\n\n  token?: string;\n\n  name?: string;\n\n  async login() {\n    await this.oauth.fetchAuthorizationCode();\n  }\n\n  async init() {\n    const authDataSerialized = await AsyncStorage.getItem('@AuthData');\n\n    if (authDataSerialized) {\n      return JSON.parse(authDataSerialized);\n    }\n\n    const hasAuthCode = await this.oauth.isReturningFromAuthServer();\n\n    if (hasAuthCode) {\n      this.accessContext = await this.oauth.getAccessToken();\n      this.token = this.accessContext?.token?.value;\n\n      const fetch = this.oauth.decorateFetchHTTPClient(window.fetch);\n      await this.getUsername(fetch);\n\n      const user = {\n        token: this.token,\n        name: this.name,\n      };\n\n      await AsyncStorage.setItem('@AuthData', JSON.stringify(user));\n\n      return user;\n    }\n\n    return null;\n  }\n\n  async getUsername(fetch: HttpClient) {\n    const res = await fetch(`${lichessHost}/api/account`);\n    this.name = (await res.json()).username;\n  }\n\n  async logout() {\n    let user = null;\n    const authDataSerialized = await AsyncStorage.getItem('@AuthData');\n\n    if (authDataSerialized) {\n      user = JSON.parse(authDataSerialized);\n    }\n\n    const { token } = user;\n\n    await fetch(`${lichessHost}/api/token`, {\n      method: 'DELETE',\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n\n    this.token = undefined;\n    this.accessContext = undefined;\n    this.error = undefined;\n\n    await AsyncStorage.removeItem('@AuthData');\n  }\n}\n","import React, { createContext, useState, useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { LichessCtrl } from '../services/LichessCtrl';\n\ntype AuthContextData = {\n  user: any,\n  setUser: any,\n  isLoading: boolean,\n  error: any,\n  setError: any,\n  login(): void,\n  logout(): void,\n};\n\nexport const AuthContext = createContext<AuthContextData>({} as AuthContextData);\n\nexport function AuthProvider({ children }:{ children:any }) {\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const AuthContextValue = useMemo(() => ({\n    user,\n    setUser,\n    error,\n    setError,\n    isLoading,\n    login: () => {\n      setIsLoading(true);\n      new LichessCtrl().login();\n    },\n    logout: () => {\n      setIsLoading(true);\n      new LichessCtrl().logout()\n        .then(() => {\n          setUser(null);\n        })\n        .finally(() => {\n          setIsLoading(false);\n        });\n    },\n  }), [user, error, isLoading]);\n\n  return (\n    <AuthContext.Provider\n      value={AuthContextValue}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nAuthProvider.propTypes = {\n  children: PropTypes.element.isRequired,\n};\n","import React, { useContext } from 'react';\nimport {\n  Box, Button, Center, Stack, Alert, VStack, HStack, Text, IconButton, CloseIcon,\n} from 'native-base';\n\nimport { AuthContext } from '../context/AuthProvider';\n\nexport default function LoginScreen() {\n  const { login, isLoading, error } = useContext(AuthContext);\n\n  return (\n    <>\n      <Box\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        flex={1}\n        _dark={{ bg: 'coolGray.800' }}\n      >\n        <Button\n          onPress={() => login()}\n          mt=\"2\"\n          colorScheme=\"tertiary\"\n          isLoading={isLoading}\n        >\n          Sign in with Lichess.org\n        </Button>\n      </Box>\n      {error && (\n        <Box\n          position=\"absolute\"\n          bottom=\"0\"\n          left=\"0\"\n          right=\"0\"\n          py=\"3\"\n        >\n          <Center>\n            <Stack space={3} w=\"90%\" maxW=\"400\">\n              <Alert w=\"100%\" status=\"error\" variant=\"left-accent\">\n                <VStack space={2} flexShrink={1} w=\"100%\">\n                  <HStack flexShrink={1} space={2} justifyContent=\"space-between\">\n                    <HStack space={2} flexShrink={1}>\n                      <Alert.Icon mt=\"1\" />\n                      <Text fontSize=\"md\" color=\"coolGray.800\">\n                        {error.toString()}\n                      </Text>\n                    </HStack>\n                    <IconButton variant=\"unstyled\" icon={<CloseIcon size=\"3\" color=\"coolGray.600\" />} />\n                  </HStack>\n                </VStack>\n              </Alert>\n            </Stack>\n          </Center>\n        </Box>\n      )}\n    </>\n  );\n}\n","import React, { useContext } from 'react';\nimport {\n  StatusBar, Box, HStack, IconButton, Icon, Text,\n} from 'native-base';\nimport { MaterialIcons } from '@expo/vector-icons';\n\nimport { AuthContext } from '../context/AuthProvider';\n\nexport default function HomeScreen() {\n  const { logout } = useContext(AuthContext);\n\n  return (\n    <>\n      <StatusBar />\n      <Box safeAreaTop />\n      <HStack\n        px=\"1\"\n        py=\"3\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        w=\"100%\"\n        _dark={{ bg: 'coolGray.800' }}\n      >\n        <HStack alignItems=\"center\">\n          <IconButton icon={<Icon size=\"sm\" as={MaterialIcons} name=\"menu\" />} />\n          <Text fontSize=\"20\" fontWeight=\"bold\">\n            Blindfold Chess\n          </Text>\n        </HStack>\n        <HStack>\n          <IconButton\n            onPress={() => logout()}\n            icon={<Icon as={MaterialIcons} name=\"logout\" size=\"sm\" />}\n          />\n        </HStack>\n      </HStack>\n    </>\n  );\n}\n","import React, { useContext, useEffect, useState } from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport {\n  Box, HStack, Spinner, Heading,\n} from 'native-base';\n\nimport { AuthContext } from '../context/AuthProvider';\nimport { LichessCtrl } from '../services/LichessCtrl';\nimport LoginScreen from '../screens/LoginScreen';\nimport HomeScreen from '../screens/HomeScreen';\n\nconst Stack = createNativeStackNavigator();\n\nexport default function Router() {\n  const [isLoading, setIsLoading] = useState(true);\n  const {\n    user, setUser, setError,\n  } = useContext(AuthContext);\n\n  useEffect(() => {\n    setIsLoading(true);\n    new LichessCtrl().init()\n      .then((response) => {\n        setUser(response);\n      })\n      .catch((error) => {\n        setError(error);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [setUser, setError, setIsLoading]);\n\n  if (isLoading) {\n    return (\n      <Box\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        flex={1}\n        _dark={{ bg: 'coolGray.800' }}\n      >\n        <HStack space={2} justifyContent=\"center\">\n          <Spinner accessibilityLabel=\"Loading\" />\n          <Heading color=\"primary.500\" fontSize=\"md\">\n            Loading\n          </Heading>\n        </HStack>\n      </Box>\n    );\n  }\n\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        {user == null ? (\n          // No token found, user isn't signed in\n          <Stack.Screen\n            name=\"Sign In\"\n            component={LoginScreen}\n            options={{ headerShown: false }}\n          />\n\n        ) : (\n          // User is signed in\n          <Stack.Screen\n            name=\"Home\"\n            component={HomeScreen}\n            options={{ headerShown: false }}\n          />\n        )}\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n","import React from 'react';\nimport { NativeBaseProvider, extendTheme } from 'native-base';\n\nimport Router from './src/routes/Router';\nimport { AuthProvider } from './src/context/AuthProvider';\n\nconst config = {\n  useSystemColorMode: true,\n  initialColorMode: 'light',\n};\n\nconst customTheme = extendTheme({ config });\n\nexport default function App() {\n  return (\n    <NativeBaseProvider theme={customTheme}>\n      <AuthProvider>\n        <Router />\n      </AuthProvider>\n    </NativeBaseProvider>\n  );\n}\n"],"sourceRoot":""}